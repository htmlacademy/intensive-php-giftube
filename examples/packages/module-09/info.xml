<?xml version="1.0" encoding="utf-8"?>
<examples>
  <example name="Объект для БД" index="1">
    <description>to do</description>
    <files>
      <file name="Database.php" main="true" show="true">
        <intro order="1">Изучим что такое классы и объекты на примере работы с БД. Напишем класс, который упростит
        основные операции при взаимодействии с MySQL.</intro>
        <states>
          <state order="2">Начинаем с определения свойств. Три приватных свойства объекта будут хранить: ресурс
            соединения, последнюю ошибку и последний результат
          </state>
          <state order="3">Определяем специальный метод - конструктор. Этот метод вызывается автоматически в момент
            создания объекта. В нем выполняется подключение к БД и сохранение полученного ресурса в свойство
          </state>
          <state order="4">Определим метод для выполнения запроса к БД. Он будет принимать SQL, выполнять запрос и
            сохранять результат или возможную ошибку во внутренних свойствах объекта
          </state>
          <state order="5">Сделаем метод для получения из объекта последней ошибки. Если ошибок не было, то он вернет
            null
          </state>
          <state order="6">Этот метод нужен, чтобы возвращать результат SELECT запросов в виде двумерного массива
          </state>
          <state order="7">Два вспомогательных метода: для получения последнего вставленного ID и для количества строк в
            результате
          </state>
        </states>
      </file>
      <file name="index.php" main="false" show="true">
        <intro order="8">В этом сценарии мы подключим созданный класс и создадим его экземпляр. Экземпляр класса
        называется объектов. В нашем случае вызывая методы этого объекта мы будем работать с БД.</intro>
        <states>
          <state order="9">Вначале создадим новый объект класса Database. Передадим туда массив с параметрами для
            подключения к MySQL. Теперь у нас есть объект для работы с БД.
          </state>
          <state order="10">Вызовем метод объекта "getLastError", чтобы узнать успешность подключения к MySQL.</state>
          <state order="11">Выполняем запрос на показ списка категорий через метод executeQuery. Присвоим массиву
            $categories полученный список.
          </state>
          <state order="12">Заменим вызовами соответствующих методов операции получения количества гифок и запрос на
            список гифок для текущей страницы.
          </state>
          <state order="13" reload="true">Если запросы выполнились без ошибок, то получим список гифок в массив и передадим его в
            шаблон вместе с остальными данными пагинации.
          </state>
        </states>
      </file>
    </files>
  </example>
  <example name="Работа с библиотеками" index="2">
    <description>to do</description>
    <files>
      <file name="GifConverter.php" main="true" show="true">
        <intro order="1">В этой демке разберемся как использовать сторонние библиотеки. Решим следующую задачу:
        для каждой загруженной гифки необходимо извлекать её первый кадр и сохранять как отдельное изображение.
        Такое изображение затем используется как превью. В этом нам помогут две библиотеки - GifFrameExtractor и
          GifCreator.</intro>
        <states>
          <state order="2">Определим свойства для хранения объектов библиотеки и имени гифки</state>
          <state order="3">Добавим метод-конструктор, который будет заполнять свойства объектами библиотеки</state>
          <state order="4">Создадим главный и единственный метод, который получит из гифки первый кадр и сохранит его
            отдельно</state>
          <state order="5">Проверяем, что переданный путь содержит валидную гифку. Если так, то получаем из неё все
            кадры</state>
          <state order="6">Выполняем всю оставшуюся работу: получаем первый кадр, создаем на его основе новую гифку и
            сохраняем её как новый файл</state>
        </states>
      </file>
      <file name="add.php" main="false" show="true">
        <intro order="7">Теперь задействуем созданный класс в сценарии добавления гифки.</intro>
        <states>
          <state order="8">Не забудем подключить сценарий с классом и файл автозагрузки composer.</state>
          <state order="9" reload="true">В процессе сохранения нужной гифки нам необходимо получить её превью. Таким превью будет
            первый кадр из этой гифки. Создадим объект нашего класса и передадим в конструктор путь к файлу
            гифки. Затем вызовем метод createAndSaveThumbnail, который и выполнит всю работу - получит первый
            кадр и сохранит его как отдельный файл.</state>
        </states>
      </file>
    </files>
  </example>
  <example name="Отправка электронной почты" index="3">
    <description>to do</description>
    <files>
      <file name="mail.php" main="true" show="true">
        <intro order="1">В этой демке разберемся как работать с электронной почтой из PHP. Напишем сценарий, который будет
        выполнять рассылку по всем пользователям GifTube. В рассылке будет обзор самых популярных гифок за неделю.</intro>
        <states>
          <state order="2">Сообщения электронной почты отправляются по протоколу SMTP. Поэтому нам понадобятся данные для
          доступа к SMTP-серверу. Указываем его адрес и логин с паролем.</state>
          <state order="3">Создадим главный объект библиотеки Symfony Mailer, ответственный за отправку сообщений. Передадим
          туда созданный объект с SMTP-сервером.</state>
          <state order="4">Сформируем запрос, который покажет три самых просматриваемых гифки из добавленных за этот
            месяц</state>
          <state order="5">Получим список записей в виде массива</state>
          <state order="6">Теперь нам нужен список из всех пользователей сайта, которые будут получателями
            рассылки</state>
          <state order="7">Подготовим полученный список к формату вида "email -> имя"</state>
          <state order="8">Установим параметры сообщения: тема, отправитель и список его получателей</state>
          <state order="9">Передадим список гифок в шаблон, используемый для сообщения</state>
          <state order="11">Отправляем подготовленное сообщение и получаем результат</state>
          <state order="12" reload="true">Если результат не был успешным, то мы можем узнать подробности ошибки
            вызовом метода из
          объекта для журналирования</state>
        </states>
      </file>
      <file name="templates/month_email.php" main="false" show="true">
        <intro order="10">Это шаблон сообщения электронной почты. Здесь мы покажем список из самых популярных гифок
          .</intro>
        <states/>
      </file>
      <file name="composer.json" main="false" show="false">
        <states/>
      </file>
    </files>
  </example>
</examples>
